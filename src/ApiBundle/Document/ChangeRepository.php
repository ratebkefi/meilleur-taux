<?php

namespace ApiBundle\Document;

use Doctrine\ODM\MongoDB\DocumentRepository;
use MongoDate;
use Symfony\Component\HttpFoundation\Request;

/**
 * ChangeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChangeRepository extends DocumentRepository
{

    public function recupererListChange(Request $request, $itemsPerPage, $pagenumber)
    {
        $form = ($pagenumber - 1) * $itemsPerPage;
        $to = $itemsPerPage + $form;
        if ($request->get('date_debut')) {
            $debut = $request->get('date_debut');
        } else {
            $debut = null;
        }

        if ($request->get('date_debut')) {
            $fin = $request->get('date_fin');
        } else
            $fin = null;

        if ($request->get('banque')) {
            $banque = $request->get('banque');
        } else
            $banque = null;

        if ($request->get('devise')) {
            $devise = $request->get('devise');
        } else
            $devise = null;

        $type = $request->get('type');
        $trie = $request->get('trie');


        if ($type == 'false') {
            $type = False;
        } else if ($type == 'true') {
            $type = True;
        };
        if ($debut != null and $fin != null) {
//----------------------------------------------------Changement de format de Date --------------------------------//
            $tabDateDebut = explode('/', $debut);
            $debut2 = $tabDateDebut[2] . '-' . $tabDateDebut[1] . '-' . $tabDateDebut[0];
            $tabDateFin = explode('/', $fin);
            $fin2 = $tabDateFin[2] . '-' . $tabDateFin[1] . '-' . $tabDateFin[0];
//------------------------------------------------Fin Changement de format de Date --------------------------------//
            $debut = new MongoDate(strtotime($debut2));
            $fin = new MongoDate(strtotime($fin2));
        };
        $qb = $this->getDocumentManager()->createQueryBuilder('ApiBundle:Change');
        if ($debut != null and $fin != null) {
            $qb->find('ApiBundle:Change')->field('date_time')
                ->range($debut, $fin);
        };
        if ($type != 'null') {
            $qb->find('ApiBundle:Change')->field('type')->equals($type);
        };
        if ($banque != null) {
            $qb->find('ApiBundle:Change')->field('banque.id')->equals($banque['id']);
        };
        if ($devise != null) {
            $qb->find('ApiBundle:Change')->field('devise.id')->equals($devise['id']);
        };
        if ($trie == 'vente_asc') {
            $qb->find('ApiBundle:Change')->sort('taux_vente', 1);
        };
        if ($trie == 'vente_desc') {
            $qb->find('ApiBundle:Change')->sort('taux_vente', -1);
        };
        if ($trie == 'achat_asc') {
            $qb->find('ApiBundle:Change')->sort('taux_achat', 1);
        };
        if ($trie == 'achat_desc') {
            $qb->find('ApiBundle:Change')->sort('taux_achat', -1);
        };
        if ($trie == 'date' or $trie == '') {
            $qb->find('ApiBundle:Change')->sort('date_time', -1);
        };
        $qb->limit($to, $form);
        $query = $qb->getQuery();
        $result = $query->toArray();
        return $result;
    }

    public function recupererTotalChange(Request $request)
    {
        if ($request->get('date_debut')) {
            $debut = $request->get('date_debut');
        } else {
            $debut = null;
        }

        if ($request->get('date_debut')) {
            $fin = $request->get('date_fin');
        } else
            $fin = null;

        if ($request->get('banque')) {
            $banque = $request->get('banque');
        } else
            $banque = null;

        if ($request->get('devise')) {
            $devise = $request->get('devise');
        } else
            $devise = null;

        $type = $request->get('type');

        if ($type == 'false') {
            $type = False;
        } else if ($type == 'true') {
            $type = True;
        };
        if (isset($debut) and isset($fin)) {
//----------------------------------------------------Changement de format de Date --------------------------------//
            $tabDateDebut = explode('/', $debut);
            $debut2 = $tabDateDebut[2] . '-' . $tabDateDebut[1] . '-' . $tabDateDebut[0];
            $tabDateFin = explode('/', $fin);
            $fin2 = $tabDateFin[2] . '-' . $tabDateFin[1] . '-' . $tabDateFin[0];
//------------------------------------------------Fin Changement de format de Date --------------------------------//
            $debut = new MongoDate(strtotime($debut2));
            $fin = new MongoDate(strtotime($fin2));
        };
        $qb = $this->getDocumentManager()->createQueryBuilder('ApiBundle:Change');

        if ($debut != null and $fin != null) {

            $qb->find('ApiBundle:Change')->field('date_time')
                ->range($debut, $fin);
        };
        if ($type != 'null') {
            $qb->find('ApiBundle:Change')->field('type')->equals($type);
        };
        if ($banque != null) {
            $qb->find('ApiBundle:Change')->field('banque.id')->equals($banque['id']);

        };
        if ($devise != null) {
            $qb->find('ApiBundle:Change')->field('devise.id')->equals($devise['id']);

        };

        // $qb->limit($to,$form);
        $query = $qb->getQuery();
        $result = $query->toArray();
        return $result;
    }

    public function derniertaux($banques, $devises)
    {
        $qe = array();
        //pour chaque banque
        foreach ($banques as $banque => $value) {
            //pour chaque devise
            foreach ($devises as $devise => $value2) {
                $qb = $this->getDocumentManager()->createQueryBuilder('ApiBundle:Change');
                //chercher les taux de change ayant la devise en cours
                $qb->find('ApiBundle:Change')->field('devise.id')->equals($value2->getId());
                //chercher les taux de change ayant la banque en cours
                $qb->find('ApiBundle:Change')->field('banque.id')->equals($value->getId());
                //trier par ordre decroissant selon la date
                $qb->find('ApiBundle:Change')->sort('date_time', -1);

                //var_dump($value2->getId());
                //var_dump($value->getId());
                $query = $qb->getQuery();
                $result = $query->toArray();
                //récupérer la 1ère valeur (la dernière mise à jour du taux de change)
                $tab = reset($result);
                //var_dump(array_values($result)[0]);exit;
                //si ce n'est pas nul, l'ajouter au tableau final
                if ($tab != null) {
                    $tabfinal = array_push($qe, $tab);
                }
            }
        }
        //var_dump($qe);exit;
        return $qe;
    }
    public function derniertauxdevise($banques, $devise)
    {
        $qe = array();
        //pour chaque banque
        foreach ($banques as $banque => $value) {
                $qb = $this->getDocumentManager()->createQueryBuilder('ApiBundle:Change');
                //chercher les taux de change ayant la devise en cours
                $qb->find('ApiBundle:Change')->field('devise.id')->equals($devise);
                //chercher les taux de change ayant la banque en cours
                $qb->find('ApiBundle:Change')->field('banque.id')->equals($value->getId());
                //trier par ordre decroissant selon la date
                $qb->find('ApiBundle:Change')->sort('date_time', -1);

                //var_dump($value2->getId());
                //var_dump($value->getId());
                $query = $qb->getQuery();
                $result = $query->toArray();
                //récupérer la 1ère valeur (la dernière mise à jour du taux de change)
                $tab = reset($result);
                //var_dump(array_values($result)[0]);exit;
                //si ce n'est pas nul, l'ajouter au tableau final
                if ($tab != null) {
                    $tabfinal = array_push($qe, $tab);

            }
        }
        //var_dump($qe);exit;
        return $qe;
    }
}
